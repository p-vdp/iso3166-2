name: Building and Testing

permissions:
  contents: read
  pull-requests: read

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - '**/*.yml'
      - 'docs/**/*'
      - LICENSE
      - .gitignore
      - '**/*.toml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # --- Detect which areas changed (drives which test jobs run) ---
  detect-changes:
    name: Detect file changes
    runs-on: ubuntu-latest
    outputs:
      iso3166_2: ${{ steps.filter.outputs.iso3166_2 }}
      scripts: ${{ steps.filter.outputs.scripts }}
    steps:
      - uses: actions/checkout@v4
      - name: Detect changed paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            iso3166_2:
              - 'iso3166_2/**'
            scripts:
              - 'scripts/**'

  # --- Unit tests: iso3166_2-related tests only ---
  test-iso3166_2:
    name: Building and testing (iso3166_2-related tests)
    needs: detect-changes
    if: needs.detect-changes.outputs.iso3166_2 == 'true'
    timeout-minutes: 15
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f tests/requirements.txt ]; then pip install -r tests/requirements.txt; fi
      - name: Run iso3166_2-specific tests
        run: |
          echo "Running iso3166_2-related tests..."
          python -m unittest -v \
            tests.test_iso3166_2 \
            tests.test_iso3166_2_api \
            tests.test_iso3166_2_metadata

  # --- Unit tests: scripts-related tests (the rest) ---
  test-scripts:
    name: Building and testing (scripts-related tests)
    needs: detect-changes
    if: needs.detect-changes.outputs.scripts == 'true'
    timeout-minutes: 15
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f tests/requirements.txt ]; then pip install -r tests/requirements.txt; fi
      - name: Run scripts-related tests
        run: |
          echo "Running scripts-related tests..."
          python -m unittest -v \
            tests.test_export_iso3166_2 \
            tests.test_language_lookup \
            tests.test_local_other_names \
            tests.test_update_subdivisions \
            tests.test_utils

  # --- Fallback: run full suite if neither iso3166_2 nor scripts changed ---
  test-all:
    name: Building and testing (full suite)
    needs: detect-changes
    if: needs.detect-changes.outputs.iso3166_2 != 'true' && needs.detect-changes.outputs.scripts != 'true'
    timeout-minutes: 15
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f tests/requirements.txt ]; then pip install -r tests/requirements.txt; fi
      - name: Run full suite
        run: |
          echo "Running full test suite..."
          python -m unittest discover tests -v

  # --- Security checks ---
  security_check:
    name: Bandit and package safety check 
    timeout-minutes: 15
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Artifacts mkdir
        run: mkdir artifacts
      - name: Package safety check
        run: |
          echo "Running package safety check"
          python -m safety check > artifacts/package_safety_output.txt
          cat artifacts/package_safety_output.txt
        continue-on-error: true
      - name: Bandit
        run: |
          echo "Running Bandit"
          python -m bandit -r iso3166-2 > artifacts/bandit_output.txt
          cat artifacts/bandit_output.txt
        continue-on-error: true
      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test_artifacts
          path: |
            artifacts/package_safety_output.txt
            artifacts/bandit_output.txt

  # --- Linter ---
  linter:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
      - name: Artifacts mkdir
        run: mkdir flake8_artifacts
      - name: Lint with flake8
        run: |
          echo "Testing using flake8..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics > flake8_artifacts/flake8_output.txt
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics >> flake8_artifacts/flake8_output.txt
        continue-on-error: true
      - name: Upload flake8 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: flake8_artifact
          path: flake8_artifacts/flake8_output.txt
          if-no-files-found: error

  # --- Code coverage ---
  code_coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f tests/requirements.txt ]; then pip install -r tests/requirements.txt; fi
          pip3 install pytest pytest-cov codecov
      - name: Generate Coverage report
        run: pytest --cov=. --cov-report=xml
      - name: Upload Coverage Report to Codecov
        uses: codecov/codecov-action@v3
        env: 
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          flags: iso3166_2_workflow